// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/dao/user.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/dao/user.go -package=daomocks -destination=internal/repository/dao/mocks/user.mock.go
//

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	reflect "reflect"

	dao "github.com/lcsin/goprojets/webook/internal/repository/dao"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserDAO is a mock of IUserDAO interface.
type MockIUserDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIUserDAOMockRecorder
}

// MockIUserDAOMockRecorder is the mock recorder for MockIUserDAO.
type MockIUserDAOMockRecorder struct {
	mock *MockIUserDAO
}

// NewMockIUserDAO creates a new mock instance.
func NewMockIUserDAO(ctrl *gomock.Controller) *MockIUserDAO {
	mock := &MockIUserDAO{ctrl: ctrl}
	mock.recorder = &MockIUserDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserDAO) EXPECT() *MockIUserDAOMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockIUserDAO) Insert(ctx context.Context, u dao.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIUserDAOMockRecorder) Insert(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIUserDAO)(nil).Insert), ctx, u)
}

// SelectByEmail mocks base method.
func (m *MockIUserDAO) SelectByEmail(ctx context.Context, email string) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByEmail", ctx, email)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByEmail indicates an expected call of SelectByEmail.
func (mr *MockIUserDAOMockRecorder) SelectByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByEmail", reflect.TypeOf((*MockIUserDAO)(nil).SelectByEmail), ctx, email)
}

// SelectByID mocks base method.
func (m *MockIUserDAO) SelectByID(ctx context.Context, ID int64) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", ctx, ID)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockIUserDAOMockRecorder) SelectByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockIUserDAO)(nil).SelectByID), ctx, ID)
}

// SelectByPhone mocks base method.
func (m *MockIUserDAO) SelectByPhone(ctx context.Context, phone string) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByPhone", ctx, phone)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByPhone indicates an expected call of SelectByPhone.
func (mr *MockIUserDAOMockRecorder) SelectByPhone(ctx, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByPhone", reflect.TypeOf((*MockIUserDAO)(nil).SelectByPhone), ctx, phone)
}

// UpdateByID mocks base method.
func (m *MockIUserDAO) UpdateByID(ctx context.Context, u dao.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockIUserDAOMockRecorder) UpdateByID(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockIUserDAO)(nil).UpdateByID), ctx, u)
}
