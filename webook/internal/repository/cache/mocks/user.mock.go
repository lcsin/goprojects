// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/cache/user.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/cache/user.go -package=cachemocks -destination=internal/repository/cache/mocks/user.mock.go
//

// Package cachemocks is a generated GoMock package.
package cachemocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/lcsin/goprojets/webook/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserCache is a mock of IUserCache interface.
type MockIUserCache struct {
	ctrl     *gomock.Controller
	recorder *MockIUserCacheMockRecorder
}

// MockIUserCacheMockRecorder is the mock recorder for MockIUserCache.
type MockIUserCacheMockRecorder struct {
	mock *MockIUserCache
}

// NewMockIUserCache creates a new mock instance.
func NewMockIUserCache(ctrl *gomock.Controller) *MockIUserCache {
	mock := &MockIUserCache{ctrl: ctrl}
	mock.recorder = &MockIUserCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserCache) EXPECT() *MockIUserCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIUserCache) Get(ctx context.Context, uid int64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, uid)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIUserCacheMockRecorder) Get(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIUserCache)(nil).Get), ctx, uid)
}

// Set mocks base method.
func (m *MockIUserCache) Set(ctx context.Context, u domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIUserCacheMockRecorder) Set(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIUserCache)(nil).Set), ctx, u)
}
